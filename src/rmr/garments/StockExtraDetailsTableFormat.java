/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rmr.garments;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author HP
 */
public class StockExtraDetailsTableFormat extends javax.swing.JFrame {

    /**
     * Creates new form StockExtraDetailsTableFormat
     */
    public StockExtraDetailsTableFormat(String contact) {
        initComponents();
        setExtendedState(this.MAXIMIZED_BOTH); 
        pfcontact=contact;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loginform = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tb2 = new javax.swing.JTable();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tb1 = new javax.swing.JTable();
        totalstock = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        loginform.setBackground(new java.awt.Color(0, 0, 0,120));
        loginform.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 102, 0), new java.awt.Color(153, 153, 153)));
        loginform.setPreferredSize(new java.awt.Dimension(700, 307));
        loginform.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel6.setIcon(new javax.swing.ImageIcon("C:\\RMR Garments\\Ritik\\Back Image.png")); // NOI18N
        jLabel6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });
        loginform.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 100, 36));

        tb2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SNO", "Code", "Size", "Quantity", "Cost Price", "Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tb2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jScrollPane4.setViewportView(tb2);
        if (tb2.getColumnModel().getColumnCount() > 0) {
            tb2.getColumnModel().getColumn(0).setResizable(false);
            tb2.getColumnModel().getColumn(0).setPreferredWidth(40);
            tb2.getColumnModel().getColumn(1).setResizable(false);
            tb2.getColumnModel().getColumn(1).setPreferredWidth(120);
            tb2.getColumnModel().getColumn(2).setResizable(false);
            tb2.getColumnModel().getColumn(2).setPreferredWidth(45);
            tb2.getColumnModel().getColumn(3).setResizable(false);
            tb2.getColumnModel().getColumn(3).setPreferredWidth(70);
            tb2.getColumnModel().getColumn(4).setResizable(false);
            tb2.getColumnModel().getColumn(4).setPreferredWidth(80);
            tb2.getColumnModel().getColumn(5).setPreferredWidth(65);
        }

        loginform.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(87, 360, 390, 280));

        jLabel12.setBackground(new java.awt.Color(204, 204, 204));
        jLabel12.setFont(new java.awt.Font("Cambria Math", 1, 30)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(204, 204, 204));
        jLabel12.setText("Stock Available");
        loginform.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 20, 240, -1));

        tb1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "SNO", "Item Name", "Code Available", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tb1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tb1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tb1MouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tb1);
        if (tb1.getColumnModel().getColumnCount() > 0) {
            tb1.getColumnModel().getColumn(0).setResizable(false);
            tb1.getColumnModel().getColumn(0).setPreferredWidth(40);
            tb1.getColumnModel().getColumn(1).setResizable(false);
            tb1.getColumnModel().getColumn(1).setPreferredWidth(110);
            tb1.getColumnModel().getColumn(2).setResizable(false);
            tb1.getColumnModel().getColumn(2).setPreferredWidth(115);
            tb1.getColumnModel().getColumn(3).setResizable(false);
            tb1.getColumnModel().getColumn(3).setPreferredWidth(65);
        }

        loginform.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(87, 70, 390, 230));

        totalstock.setEditable(false);
        totalstock.setBackground(new java.awt.Color(249, 215, 184));
        totalstock.setFont(new java.awt.Font("Cambria Math", 0, 18)); // NOI18N
        totalstock.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        totalstock.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        totalstock.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                totalstockFocusGained(evt);
            }
        });
        totalstock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalstockActionPerformed(evt);
            }
        });
        loginform.add(totalstock, new org.netbeans.lib.awtextra.AbsoluteConstraints(365, 315, 110, 30));

        jLabel25.setBackground(new java.awt.Color(204, 204, 204));
        jLabel25.setFont(new java.awt.Font("Cambria Math", 1, 22)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(204, 204, 204));
        jLabel25.setText("Amout of Stock Available");
        loginform.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(85, 315, 270, 30));

        getContentPane().add(loginform, new org.netbeans.lib.awtextra.AbsoluteConstraints(388, 50, 550, 668));

        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\RMR Garments\\Ritik\\ForgetPasswordBackground.png")); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1366, 768));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
String pfcontact="";
    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
        StockFrame s = new StockFrame(pfcontact);
        s.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jLabel6MouseClicked
int finalamount=0;
    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        int sno = 0, codes = 0, qty = 0;
        DefaultTableModel model = (DefaultTableModel) tb1.getModel();
        try {
            while (model.getRowCount() > 0) {
                for (int i = 0; i < model.getRowCount(); i++) {
                    model.removeRow(i);
                }
            }
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/garmentsshop", "root", "root");
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("select count(Code),sum(Quantity) from jeans");
            while (rs.next()) {
                codes = rs.getInt("count(Code)");
                qty = rs.getInt("sum(Quantity)");
            }
            sno++;
            model.addRow(new Object[]{sno, "Jeans", codes, qty});
            ResultSet rs1 = st.executeQuery("select count(Code),sum(Quantity) from trouser");
            while (rs1.next()) {
                codes = rs1.getInt("count(Code)");
                qty = rs1.getInt("sum(Quantity)");
            }
            sno++;
            model.addRow(new Object[]{sno, "Trouser", codes, qty});
            ResultSet rs2 = st.executeQuery("select count(Code),sum(Quantity) from halfsleeveshirt");
            while (rs2.next()) {
                codes = rs2.getInt("count(Code)");
                qty = rs2.getInt("sum(Quantity)");
            }
            sno++;
            model.addRow(new Object[]{sno, "Half Sleeve Shirts", codes, qty});
            ResultSet rs3 = st.executeQuery("select count(Code),sum(Quantity) from fullsleeveshirt");
            while (rs3.next()) {
                codes = rs3.getInt("count(Code)");
                qty = rs3.getInt("sum(Quantity)");
            }
            sno++;
            model.addRow(new Object[]{sno, "Full Sleeve Shirts", codes, qty});
            ResultSet rs4 = st.executeQuery("select count(Code),sum(Quantity) from halfsleevetshirt");
            while (rs4.next()) {
                codes = rs4.getInt("count(Code)");
                qty = rs4.getInt("sum(Quantity)");
            }
            sno++;
            model.addRow(new Object[]{sno, "Half T-Shirts", codes, qty});
            ResultSet rs5 = st.executeQuery("select count(Code),sum(Quantity) from fullsleevetshirt");
            while (rs5.next()) {
                codes = rs5.getInt("count(Code)");
                qty = rs5.getInt("sum(Quantity)");
            }
            sno++;
            model.addRow(new Object[]{sno, "Full T-Shirts", codes, qty});
            ResultSet rs6 = st.executeQuery("select count(Code),sum(Quantity) from lowers");
            while (rs6.next()) {
                codes = rs6.getInt("count(Code)");
                qty = rs6.getInt("sum(Quantity)");
            }
            sno++;
            model.addRow(new Object[]{sno, "Lowers", codes, qty});
            ResultSet rs7 = st.executeQuery("select count(Item),sum(Quantity) from seasonal");
            while (rs7.next()) {
                codes = rs7.getInt("count(Item)");
                qty = rs7.getInt("sum(Quantity)");
            }
            sno++;
            model.addRow(new Object[]{sno, "Seasonal", codes, qty});
            ResultSet rs8 = st.executeQuery("select count(Item),sum(Quantity) from undergarments");
            while (rs8.next()) {
                codes = rs8.getInt("count(Item)");
                qty = rs8.getInt("sum(Quantity)");
            }
            sno++;
            model.addRow(new Object[]{sno, "Under Garments", codes, qty});
            ResultSet rs9 = st.executeQuery("select count(Item),sum(Quantity) from socks");
            while (rs9.next()) {
                codes = rs9.getInt("count(Item)");
                qty = rs9.getInt("sum(Quantity)");
            }
            sno++;
            model.addRow(new Object[]{sno, "Socks", codes, qty});
            con.close();
        } catch (Exception e) {
            System.out.println("Error");
        }
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        finalamount=0;
        int n = 0, count = 0, i, inc = 0;
        String code = "", size = "";
        String codearray[] = null;
        String sizearray[] = null;
        int cparray[] = null;
        int cp = 0, totalqty = 0;
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/garmentsshop", "root", "root");
            Statement st = con.createStatement();
                ResultSet rs = st.executeQuery("Select count(Code) from jeans");
                while (rs.next()) {
                    int total = rs.getInt("count(Code)");
                    codearray = new String[total];
                    cparray = new int[total];
                }
                ResultSet rs1 = st.executeQuery("Select * from jeans");
                while (rs1.next()) {
                    codearray[count] = rs1.getString("Code");
                    cparray[count] = rs1.getInt("CP");
                    count++;
                }
                for (i = 0; i < codearray.length; i++) {
                    ResultSet rs2 = st.executeQuery("Select count(Size) from jeanssize where Code='" + codearray[i] + "'");
                    while (rs2.next()) {
                        int total = rs2.getInt("count(Size)");
                        sizearray = new String[total];
                    }
                    int sizecount = 0;
                    ResultSet rs3 = st.executeQuery("Select Size from jeanssize where Code='" + codearray[i] + "'");
                    while (rs3.next()) {
                        sizearray[sizecount++] = rs3.getString("Size");
                    }
                    sizecount=0;
                    ResultSet rs4=st.executeQuery("Select Quantity from jeanssize where Code='"+codearray[i]+"'");
                    while(rs4.next())
                    {
                        finalamount=finalamount+(rs4.getInt("Quantity") * cparray[i]);
                    } 
                }
                codearray=null;
                cparray=null;
                count=0;
                sizearray=null;
                ResultSet rs5 = st.executeQuery("Select count(Code) from trouser");
                while (rs5.next()) {
                    int total = rs5.getInt("count(Code)");
                    codearray = new String[total];
                    cparray = new int[total];
                }
                ResultSet rs6 = st.executeQuery("Select * from trouser");
                while (rs6.next()) {
                    codearray[count] = rs6.getString("Code");
                    cparray[count] = rs6.getInt("CP");
                    count++;
                }
                for (i = 0; i < codearray.length; i++) {
                    ResultSet rs2 = st.executeQuery("Select count(Size) from trousersize where Code='" + codearray[i] + "'");
                    while (rs2.next()) {
                        int total = rs2.getInt("count(Size)");
                        sizearray = new String[total];
                    }
                    int sizecount = 0;
                    ResultSet rs3 = st.executeQuery("Select Size from trousersize where Code='" + codearray[i] + "'");
                    while (rs3.next()) {
                        sizearray[sizecount++] = rs3.getString("Size");
                    }
                    sizecount=0;
                    ResultSet rs4=st.executeQuery("Select Quantity from trousersize where Code='"+codearray[i]+"'");
                    while(rs4.next())
                    {
                        finalamount=finalamount+(rs4.getInt("Quantity") * cparray[i]);
                    } 
                } 
                codearray=null;
                cparray=null;
                count=0;
                sizearray=null;
                ResultSet rs7 = st.executeQuery("Select count(Code) from halfsleeveshirt");
                while (rs7.next()) {
                    int total = rs7.getInt("count(Code)");
                    codearray = new String[total];
                    cparray = new int[total];
                }
                ResultSet rs8 = st.executeQuery("Select * from halfsleeveshirt");
                while (rs8.next()) {
                    codearray[count] = rs8.getString("Code");
                    cparray[count] = rs8.getInt("CP");
                    count++;
                }
                for (i = 0; i < codearray.length; i++) {
                    ResultSet rs2 = st.executeQuery("Select count(Size) from halfsleeveshirtsize where Code='" + codearray[i] + "'");
                    while (rs2.next()) {
                        int total = rs2.getInt("count(Size)");
                        sizearray = new String[total];
                    }
                    int sizecount = 0;
                    ResultSet rs3 = st.executeQuery("Select Size from halfsleeveshirtsize where Code='" + codearray[i] + "'");
                    while (rs3.next()) {
                        sizearray[sizecount++] = rs3.getString("Size");
                    }
                    sizecount=0;
                    ResultSet rs4=st.executeQuery("Select Quantity from halfsleeveshirtsize where Code='"+codearray[i]+"'");
                    while(rs4.next())
                    {
                        finalamount=finalamount+(rs4.getInt("Quantity") * cparray[i]);
                    } 
                }
                codearray=null;
                cparray=null;
                count=0;
                sizearray=null;                
                ResultSet rs9 = st.executeQuery("Select count(Code) from fullsleeveshirt");
                while (rs9.next()) {
                    int total = rs9.getInt("count(Code)");
                    codearray = new String[total];
                    cparray = new int[total];
                }
                ResultSet rs10 = st.executeQuery("Select * from fullsleeveshirt");
                while (rs10.next()) {
                    codearray[count] = rs10.getString("Code");
                    cparray[count] = rs10.getInt("CP");
                    count++;
                }
                for (i = 0; i < codearray.length; i++) {
                    ResultSet rs2 = st.executeQuery("Select count(Size) from fullsleeveshirtsize where Code='" + codearray[i] + "'");
                    while (rs2.next()) {
                        int total = rs2.getInt("count(Size)");
                        sizearray = new String[total];
                    }
                    int sizecount = 0;
                    ResultSet rs3 = st.executeQuery("Select Size from fullsleeveshirtsize where Code='" + codearray[i] + "'");
                    while (rs3.next()) {
                        sizearray[sizecount++] = rs3.getString("Size");
                    }
                    sizecount=0;
                    ResultSet rs4=st.executeQuery("Select Quantity from fullsleeveshirtsize where Code='"+codearray[i]+"'");
                    while(rs4.next())
                    {
                        finalamount=finalamount+(rs4.getInt("Quantity") * cparray[i]);
                    } 
                }
                codearray=null;
                cparray=null;
                count=0;
                sizearray=null;
                ResultSet rs11 = st.executeQuery("Select count(Code) from halfsleevetshirt");
                while (rs11.next()) {
                    int total = rs11.getInt("count(Code)");
                    codearray = new String[total];
                    cparray = new int[total];
                }
                ResultSet rs12 = st.executeQuery("Select * from halfsleevetshirt");
                while (rs12.next()) {
                    codearray[count] = rs12.getString("Code");
                    cparray[count] = rs12.getInt("CP");
                    count++;
                }
                for (i = 0; i < codearray.length; i++) {
                    ResultSet rs2 = st.executeQuery("Select count(Size) from halfsleevetshirtsize where Code='" + codearray[i] + "'");
                    while (rs2.next()) {
                        int total = rs2.getInt("count(Size)");
                        sizearray = new String[total];
                    }
                    int sizecount = 0;
                    ResultSet rs3 = st.executeQuery("Select Size from halfsleevetshirtsize where Code='" + codearray[i] + "'");
                    while (rs3.next()) {
                        sizearray[sizecount++] = rs3.getString("Size");
                    }
                    sizecount=0;
                    ResultSet rs4=st.executeQuery("Select Quantity from halfsleevetshirtsize where Code='"+codearray[i]+"'");
                    while(rs4.next())
                    {
                        finalamount=finalamount+(rs4.getInt("Quantity") * cparray[i]);
                    } 
                }     
                codearray=null;
                cparray=null;
                count=0;
                sizearray=null;                
                ResultSet rs13 = st.executeQuery("Select count(Code) from fullsleevetshirt");
                while (rs13.next()) {
                    int total = rs13.getInt("count(Code)");
                    codearray = new String[total];
                    cparray = new int[total];
                }
                ResultSet rs14 = st.executeQuery("Select * from fullsleevetshirt");
                while (rs14.next()) {
                    codearray[count] = rs14.getString("Code");
                    cparray[count] = rs14.getInt("CP");
                    count++;
                }
                for (i = 0; i < codearray.length; i++) {
                    ResultSet rs2 = st.executeQuery("Select count(Size) from fullsleevetshirtsize where Code='" + codearray[i] + "'");
                    while (rs2.next()) {
                        int total = rs2.getInt("count(Size)");
                        sizearray = new String[total];
                    }
                    int sizecount = 0;
                    ResultSet rs3 = st.executeQuery("Select Size from fullsleevetshirtsize where Code='" + codearray[i] + "'");
                    while (rs3.next()) {
                        sizearray[sizecount++] = rs3.getString("Size");
                    }
                    sizecount=0;
                    ResultSet rs4=st.executeQuery("Select Quantity from fullsleevetshirtsize where Code='"+codearray[i]+"'");
                    while(rs4.next())
                    {
                        finalamount=finalamount+(rs4.getInt("Quantity") * cparray[i]);
                    } 
                }     
                codearray=null;
                cparray=null;
                count=0;
                sizearray=null;                
                ResultSet rs15 = st.executeQuery("Select count(Code) from lowers");
                while (rs15.next()) {
                    int total = rs15.getInt("count(Code)");
                    codearray = new String[total];
                    cparray = new int[total];
                }
                ResultSet rs16 = st.executeQuery("Select * from lowers");
                while (rs16.next()) {
                    codearray[count] = rs16.getString("Code");
                    cparray[count] = rs16.getInt("CP");
                    count++;
                }
                for (i = 0; i < codearray.length; i++) {
                    ResultSet rs2 = st.executeQuery("Select count(Size) from lowerssize where Code='" + codearray[i] + "'");
                    while (rs2.next()) {
                        int total = rs2.getInt("count(Size)");
                        sizearray = new String[total];
                    }
                    int sizecount = 0;
                    ResultSet rs3 = st.executeQuery("Select Size from lowerssize where Code='" + codearray[i] + "'");
                    while (rs3.next()) {
                        sizearray[sizecount++] = rs3.getString("Size");
                    }
                    sizecount=0;
                    ResultSet rs4=st.executeQuery("Select Quantity from lowerssize where Code='"+codearray[i]+"'");
                    while(rs4.next())
                    {
                        finalamount=finalamount+(rs4.getInt("Quantity") * cparray[i]);
                    } 
                }       
                codearray=null;
                cparray=null;
                count=0;
                sizearray=null;                
                ResultSet rs17 = st.executeQuery("Select count(Item) from seasonal");
                while (rs17.next()) {
                    int total = rs17.getInt("count(Item)");
                    codearray = new String[total];
                }
                ResultSet rs18 = st.executeQuery("Select * from seasonal");
                while (rs18.next()) {
                    codearray[count] = rs18.getString("Item");
                    count++;
                }
                for (i = 0; i < codearray.length; i++) {
                    ResultSet rs2 = st.executeQuery("Select count(size) from seasonalsize where Item='" + codearray[i] + "'");
                    while (rs2.next()) {
                        int total = rs2.getInt("count(size)");
                        cparray = new int[total];
                        sizearray = new String[total];
                    }
                    int sizecount = 0;
                    count=0;
                    ResultSet rs3 = st.executeQuery("Select size,CP from seasonalsize where Item='" + codearray[i] + "'");
                    while (rs3.next()) {
                        sizearray[sizecount++] = rs3.getString("Size");
                        cparray[count++]=rs3.getInt("CP");
                    }
                    sizecount=0;
                    count=0;
                    ResultSet rs4=st.executeQuery("Select Quantity from seasonalsize where Item='"+codearray[i]+"'");
                    while(rs4.next())
                    {
                        finalamount=finalamount+(rs4.getInt("Quantity") * cparray[count]);
                    } 
                }    
                codearray=null;
                cparray=null;
                count=0;
                sizearray=null;                
                ResultSet rs19 = st.executeQuery("Select count(Item) from undergarments");
                while (rs19.next()) {
                    int total = rs19.getInt("count(Item)");
                    codearray = new String[total];
                }
                ResultSet rs20 = st.executeQuery("Select * from undergarments");
                while (rs20.next()) {
                    codearray[count] = rs20.getString("Item");
                    count++;
                }
                for (i = 0; i < codearray.length; i++) {
                    ResultSet rs2 = st.executeQuery("Select count(size) from undergarmentssize where Item='" + codearray[i] + "'");
                    while (rs2.next()) {
                        int total = rs2.getInt("count(size)");
                        cparray = new int[total];
                        sizearray = new String[total];
                    }
                    int sizecount = 0;
                    count=0;
                    ResultSet rs3 = st.executeQuery("Select size,CP from undergarmentssize where Item='" + codearray[i] + "'");
                    while (rs3.next()) {
                        sizearray[sizecount++] = rs3.getString("Size");
                        cparray[count++]=rs3.getInt("CP");
                    }
                    sizecount=0;
                    count=0;
                    ResultSet rs4=st.executeQuery("Select Quantity from undergarmentssize where Item='"+codearray[i]+"'");
                    while(rs4.next())
                    {
                        finalamount=finalamount+(rs4.getInt("Quantity") * cparray[count]);
                    } 
                }     
                codearray=null;
                cparray=null;
                count=0;
                sizearray=null;
                ResultSet rs21=st.executeQuery("Select * from socks");
                while(rs21.next())
                {
                    finalamount=finalamount+(rs21.getInt("Quantity") * rs21.getInt("CP"));
                    
                }                             
                System.out.println(finalamount);
                totalstock.setText(""+finalamount);
        } catch (Exception e) {
        }        
    }//GEN-LAST:event_formWindowGainedFocus
    String item = "";
    int amount=0;
    private void tb1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tb1MouseClicked
        int sno = 0, n = 0, count = 0, i, inc = 0;
        String code = "", size = "";
        String codearray[] = null;
        String sizearray[] = null;
        int cparray[] = null;
        int qty = 0, cp = 0, totalqty = 0;
        DefaultTableModel model1 = (DefaultTableModel) tb1.getModel();
        item = (String) model1.getValueAt(tb1.getSelectedRow(), 1);
        DefaultTableModel model = (DefaultTableModel) tb2.getModel();
        try {
            while (model.getRowCount() > 0) {
                for (i = 0; i < model.getRowCount(); i++) {
                    model.removeRow(i);
                }
            }
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/garmentsshop", "root", "root");
            Statement st = con.createStatement();
            if(item.equals("Jeans"))
            {
                ResultSet rs = st.executeQuery("Select count(Code) from jeans");
                while (rs.next()) {
                    int total = rs.getInt("count(Code)");
                    codearray = new String[total];
                    cparray = new int[total];
                }
                ResultSet rs1 = st.executeQuery("Select * from jeans");
                while (rs1.next()) {
                    codearray[count] = rs1.getString("Code");
                    cparray[count] = rs1.getInt("CP");
                    count++;
                }
                for (i = 0; i < codearray.length; i++) {
                    ResultSet rs2 = st.executeQuery("Select count(Size) from jeanssize where Code='" + codearray[i] + "'");
                    while (rs2.next()) {
                        int total = rs2.getInt("count(Size)");
                        sizearray = new String[total];
                    }
                    int sizecount = 0;
                    ResultSet rs3 = st.executeQuery("Select Size from jeanssize where Code='" + codearray[i] + "'");
                    while (rs3.next()) {
                        sizearray[sizecount++] = rs3.getString("Size");
                    }
                    sizecount=0;
                    ResultSet rs4=st.executeQuery("Select Quantity from jeanssize where Code='"+codearray[i]+"'");
                    while(rs4.next())
                    {
                        amount=rs4.getInt("Quantity") * cparray[i];
                        model.addRow(new Object[]{++sno,codearray[i],sizearray[sizecount++],rs4.getInt("Quantity"),cparray[i],amount});
                        amount=0;
                    } 
                }
            }
            else if(item.equals("Trouser"))
            {
                ResultSet rs = st.executeQuery("Select count(Code) from trouser");
                while (rs.next()) {
                    int total = rs.getInt("count(Code)");
                    codearray = new String[total];
                    cparray = new int[total];
                }
                ResultSet rs1 = st.executeQuery("Select * from trouser");
                while (rs1.next()) {
                    codearray[count] = rs1.getString("Code");
                    cparray[count] = rs1.getInt("CP");
                    count++;
                }
                for (i = 0; i < codearray.length; i++) {
                    ResultSet rs2 = st.executeQuery("Select count(Size) from trousersize where Code='" + codearray[i] + "'");
                    while (rs2.next()) {
                        int total = rs2.getInt("count(Size)");
                        sizearray = new String[total];
                    }
                    int sizecount = 0;
                    ResultSet rs3 = st.executeQuery("Select Size from trousersize where Code='" + codearray[i] + "'");
                    while (rs3.next()) {
                        sizearray[sizecount++] = rs3.getString("Size");
                    }
                    sizecount=0;
                    ResultSet rs4=st.executeQuery("Select Quantity from trousersize where Code='"+codearray[i]+"'");
                    while(rs4.next())
                    {
                        amount=rs4.getInt("Quantity") * cparray[i];
                        model.addRow(new Object[]{++sno,codearray[i],sizearray[sizecount++],rs4.getInt("Quantity"),cparray[i],amount});
                        amount=0;
                    } 
                }                
            }
            else if(item.equals("Half Sleeve Shirts"))
            {
                ResultSet rs = st.executeQuery("Select count(Code) from halfsleeveshirt");
                while (rs.next()) {
                    int total = rs.getInt("count(Code)");
                    codearray = new String[total];
                    cparray = new int[total];
                }
                ResultSet rs1 = st.executeQuery("Select * from halfsleeveshirt");
                while (rs1.next()) {
                    codearray[count] = rs1.getString("Code");
                    cparray[count] = rs1.getInt("CP");
                    count++;
                }
                for (i = 0; i < codearray.length; i++) {
                    ResultSet rs2 = st.executeQuery("Select count(Size) from halfsleeveshirtsize where Code='" + codearray[i] + "'");
                    while (rs2.next()) {
                        int total = rs2.getInt("count(Size)");
                        sizearray = new String[total];
                    }
                    int sizecount = 0;
                    ResultSet rs3 = st.executeQuery("Select Size from halfsleeveshirtsize where Code='" + codearray[i] + "'");
                    while (rs3.next()) {
                        sizearray[sizecount++] = rs3.getString("Size");
                    }
                    sizecount=0;
                    ResultSet rs4=st.executeQuery("Select Quantity from halfsleeveshirtsize where Code='"+codearray[i]+"'");
                    while(rs4.next())
                    {
                        amount=rs4.getInt("Quantity") * cparray[i];
                        model.addRow(new Object[]{++sno,codearray[i],sizearray[sizecount++],rs4.getInt("Quantity"),cparray[i],amount});
                        amount=0;
                    } 
                }                  
            }
            else if(item.equals("Full Sleeve Shirts"))
            {
                ResultSet rs = st.executeQuery("Select count(Code) from fullsleeveshirt");
                while (rs.next()) {
                    int total = rs.getInt("count(Code)");
                    codearray = new String[total];
                    cparray = new int[total];
                }
                ResultSet rs1 = st.executeQuery("Select * from fullsleeveshirt");
                while (rs1.next()) {
                    codearray[count] = rs1.getString("Code");
                    cparray[count] = rs1.getInt("CP");
                    count++;
                }
                for (i = 0; i < codearray.length; i++) {
                    ResultSet rs2 = st.executeQuery("Select count(Size) from fullsleeveshirtsize where Code='" + codearray[i] + "'");
                    while (rs2.next()) {
                        int total = rs2.getInt("count(Size)");
                        sizearray = new String[total];
                    }
                    int sizecount = 0;
                    ResultSet rs3 = st.executeQuery("Select Size from fullsleeveshirtsize where Code='" + codearray[i] + "'");
                    while (rs3.next()) {
                        sizearray[sizecount++] = rs3.getString("Size");
                    }
                    sizecount=0;
                    ResultSet rs4=st.executeQuery("Select Quantity from fullsleeveshirtsize where Code='"+codearray[i]+"'");
                    while(rs4.next())
                    {
                        amount=rs4.getInt("Quantity") * cparray[i];
                        model.addRow(new Object[]{++sno,codearray[i],sizearray[sizecount++],rs4.getInt("Quantity"),cparray[i],amount});
                        amount=0;
                    } 
                }                  
            }
            else if(item.equals("Half T-Shirts"))
            {
                ResultSet rs = st.executeQuery("Select count(Code) from halfsleevetshirt");
                while (rs.next()) {
                    int total = rs.getInt("count(Code)");
                    codearray = new String[total];
                    cparray = new int[total];
                }
                ResultSet rs1 = st.executeQuery("Select * from halfsleevetshirt");
                while (rs1.next()) {
                    codearray[count] = rs1.getString("Code");
                    cparray[count] = rs1.getInt("CP");
                    count++;
                }
                for (i = 0; i < codearray.length; i++) {
                    ResultSet rs2 = st.executeQuery("Select count(Size) from halfsleevetshirtsize where Code='" + codearray[i] + "'");
                    while (rs2.next()) {
                        int total = rs2.getInt("count(Size)");
                        sizearray = new String[total];
                    }
                    int sizecount = 0;
                    ResultSet rs3 = st.executeQuery("Select Size from halfsleevetshirtsize where Code='" + codearray[i] + "'");
                    while (rs3.next()) {
                        sizearray[sizecount++] = rs3.getString("Size");
                    }
                    sizecount=0;
                    ResultSet rs4=st.executeQuery("Select Quantity from halfsleevetshirtsize where Code='"+codearray[i]+"'");
                    while(rs4.next())
                    {
                        amount=rs4.getInt("Quantity") * cparray[i];
                        model.addRow(new Object[]{++sno,codearray[i],sizearray[sizecount++],rs4.getInt("Quantity"),cparray[i],amount});
                        amount=0;
                    } 
                }                
            }
            else if(item.equals("Full T-Shirts"))
            {
                ResultSet rs = st.executeQuery("Select count(Code) from fullsleevetshirt");
                while (rs.next()) {
                    int total = rs.getInt("count(Code)");
                    codearray = new String[total];
                    cparray = new int[total];
                }
                ResultSet rs1 = st.executeQuery("Select * from fullsleevetshirt");
                while (rs1.next()) {
                    codearray[count] = rs1.getString("Code");
                    cparray[count] = rs1.getInt("CP");
                    count++;
                }
                for (i = 0; i < codearray.length; i++) {
                    ResultSet rs2 = st.executeQuery("Select count(Size) from fullsleevetshirtsize where Code='" + codearray[i] + "'");
                    while (rs2.next()) {
                        int total = rs2.getInt("count(Size)");
                        sizearray = new String[total];
                    }
                    int sizecount = 0;
                    ResultSet rs3 = st.executeQuery("Select Size from fullsleevetshirtsize where Code='" + codearray[i] + "'");
                    while (rs3.next()) {
                        sizearray[sizecount++] = rs3.getString("Size");
                    }
                    sizecount=0;
                    ResultSet rs4=st.executeQuery("Select Quantity from fullsleevetshirtsize where Code='"+codearray[i]+"'");
                    while(rs4.next())
                    {
                        amount=rs4.getInt("Quantity") * cparray[i];
                        model.addRow(new Object[]{++sno,codearray[i],sizearray[sizecount++],rs4.getInt("Quantity"),cparray[i],amount});
                        amount=0;
                    } 
                }                 
            }
            else if(item.equals("Lowers"))
            {
                ResultSet rs = st.executeQuery("Select count(Code) from lowers");
                while (rs.next()) {
                    int total = rs.getInt("count(Code)");
                    codearray = new String[total];
                    cparray = new int[total];
                }
                ResultSet rs1 = st.executeQuery("Select * from lowers");
                while (rs1.next()) {
                    codearray[count] = rs1.getString("Code");
                    cparray[count] = rs1.getInt("CP");
                    count++;
                }
                for (i = 0; i < codearray.length; i++) {
                    ResultSet rs2 = st.executeQuery("Select count(Size) from lowerssize where Code='" + codearray[i] + "'");
                    while (rs2.next()) {
                        int total = rs2.getInt("count(Size)");
                        sizearray = new String[total];
                    }
                    int sizecount = 0;
                    ResultSet rs3 = st.executeQuery("Select Size from lowerssize where Code='" + codearray[i] + "'");
                    while (rs3.next()) {
                        sizearray[sizecount++] = rs3.getString("Size");
                    }
                    sizecount=0;
                    ResultSet rs4=st.executeQuery("Select Quantity from lowerssize where Code='"+codearray[i]+"'");
                    while(rs4.next())
                    {
                        amount=rs4.getInt("Quantity") * cparray[i];
                        model.addRow(new Object[]{++sno,codearray[i],sizearray[sizecount++],rs4.getInt("Quantity"),cparray[i],amount});
                        amount=0;
                    } 
                }                 
            }
            else if(item.equals("Seasonal"))
            {
                ResultSet rs = st.executeQuery("Select count(Item) from seasonal");
                while (rs.next()) {
                    int total = rs.getInt("count(Item)");
                    codearray = new String[total];
                }
                ResultSet rs1 = st.executeQuery("Select * from seasonal");
                while (rs1.next()) {
                    codearray[count] = rs1.getString("Item");
                    count++;
                }
                for (i = 0; i < codearray.length; i++) {
                    ResultSet rs2 = st.executeQuery("Select count(size) from seasonalsize where Item='" + codearray[i] + "'");
                    while (rs2.next()) {
                        int total = rs2.getInt("count(size)");
                        cparray = new int[total];
                        sizearray = new String[total];
                    }
                    int sizecount = 0;
                    count=0;
                    ResultSet rs3 = st.executeQuery("Select size,CP from seasonalsize where Item='" + codearray[i] + "'");
                    while (rs3.next()) {
                        sizearray[sizecount++] = rs3.getString("Size");
                        cparray[count++]=rs3.getInt("CP");
                    }
                    sizecount=0;
                    count=0;
                    ResultSet rs4=st.executeQuery("Select Quantity from seasonalsize where Item='"+codearray[i]+"'");
                    while(rs4.next())
                    {
                        amount=rs4.getInt("Quantity") * cparray[count];
                        model.addRow(new Object[]{++sno,codearray[i],sizearray[sizecount++],rs4.getInt("Quantity"),cparray[count],amount});
                        amount=0;
                    } 
                }                 
            }  
            else if(item.equals("Under Garments"))
            {
                ResultSet rs = st.executeQuery("Select count(Item) from undergarments");
                while (rs.next()) {
                    int total = rs.getInt("count(Item)");
                    codearray = new String[total];
                }
                ResultSet rs1 = st.executeQuery("Select * from undergarments");
                while (rs1.next()) {
                    codearray[count] = rs1.getString("Item");
                    count++;
                }
                for (i = 0; i < codearray.length; i++) {
                    ResultSet rs2 = st.executeQuery("Select count(size) from undergarmentssize where Item='" + codearray[i] + "'");
                    while (rs2.next()) {
                        int total = rs2.getInt("count(size)");
                        cparray = new int[total];
                        sizearray = new String[total];
                    }
                    int sizecount = 0;
                    count=0;
                    ResultSet rs3 = st.executeQuery("Select size,CP from undergarmentssize where Item='" + codearray[i] + "'");
                    while (rs3.next()) {
                        sizearray[sizecount++] = rs3.getString("Size");
                        cparray[count++]=rs3.getInt("CP");
                    }
                    sizecount=0;
                    count=0;
                    ResultSet rs4=st.executeQuery("Select Quantity from undergarmentssize where Item='"+codearray[i]+"'");
                    while(rs4.next())
                    {
                        amount=rs4.getInt("Quantity") * cparray[count];
                        model.addRow(new Object[]{++sno,codearray[i],sizearray[sizecount++],rs4.getInt("Quantity"),cparray[count],amount});
                        amount=0;
                    } 
                }                   
            }    
            else if(item.equals("Socks"))
            {
                ResultSet rs=st.executeQuery("Select * from socks");
                while(rs.next())
                {
                    amount=rs.getInt("Quantity") * rs.getInt("CP");
                    model.addRow(new Object[]{++sno,rs.getString("Item"),"NA",rs.getInt("Quantity"),rs.getInt("CP"),amount});
                    amount=0;
                }                 
                
            }              
        } catch (Exception e) {
        }
    }//GEN-LAST:event_tb1MouseClicked

    private void totalstockFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_totalstockFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_totalstockFocusGained

    private void totalstockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalstockActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalstockActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StockExtraDetailsTableFormat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StockExtraDetailsTableFormat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StockExtraDetailsTableFormat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StockExtraDetailsTableFormat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                String a="";
                new StockExtraDetailsTableFormat(a).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JPanel loginform;
    private javax.swing.JTable tb1;
    private javax.swing.JTable tb2;
    public static javax.swing.JTextField totalstock;
    // End of variables declaration//GEN-END:variables
}
